---
title: "Практическое задание №5"
author: "Журавлева Юлия БИСО-01-20"
format: 
  md:
    output-file: README.md
---
# Исследование информации о состоянии беспроводных сетей

## Цель работы

1. Получить знания о методах исследования радиоэлектронной обстановки.
2. Составить представление о механизмах работы Wi-Fi сетей на канальном и сетевом уровне модели OSI.
3. Закрепить практические навыки использования языка программирования для обработки данных
4. Закрепить знания основных функций обработки данных экосистемы `tidyverse` языка R

## Исходные данные

1.  ОС Windows 10
2.  RStudio Desktop
3.  Интерпретатор языка R 4.2.2
4.  Файл `mir.csv-01.csv`

## План

1. Импортировать данные из файла `mir.csv-01.csv` и привести в вид "аккуратных данных".
2. Провести анализ точек доступа.
3. Провести анализ данных клиентов.
4. Ответить на поставленные вопросы.

## Ход выполнения работы

### Этап 1. Подготовка данных

Для начала установим пакет `dplyr`.

```{r}
library(dplyr)
```

Импортируем данные из общего файла файла в 2 разных датафрейма: анонсы беспроводных точек доступа и запросы на подключение клиентов к известным им точкам доступа. При выводе всего датафрейма заметим, что в первом датафрейме всего 167 строк. 

```{r}
ds1 <- read.csv("mir.csv-01.csv", nrows = 167)
ds1 %>% head(10)
```

Следующим импортируем второй датафрейм - запросы на подключение клиентов к известным им точкам доступа. Заметим, что нужно пропустить несколько строк, которые относятся к предыдущему датафрейму. При задавании номера строки skip нужно смотреть на положение датафрейма. Нужная строка => 169.

```{r}
ds2 <- read.csv("mir.csv-01.csv", skip = 169)
ds2 %>% head(10)
```

Приведём в вид "аккуратных данных" первый датафрейм - анонсы беспроводных точек доступа. 

Посмотрим на первоначальный вид первого датафрейма.

```{r}
ds1 %>% glimpse() 
```

Преобразуем тип данных `chr` в `dttm` для столбцов `First.time.seen` и `First.time.seen`. Это нужно для корректного отображения даты и времени. Затем посмотрим на изменённый датафрейм.

```{r}
ds1$First.time.seen <- as.POSIXct(ds1$First.time.seen, 
                                  format = "%Y-%m-%d %H:%M:%S")
ds1$Last.time.seen <- as.POSIXct(ds1$Last.time.seen, 
                                 format = "%Y-%m-%d %H:%M:%S")
ds1 %>% glimpse() 
```

Далее приведём в вид "аккуратных данных" второй датафрейм - запросы на подключение клиентов к известным им точкам доступа. 

Посмотрим на первоначальный вид второго датафрейм.

```{r}
ds2 %>% glimpse() 
```

Преобразуем тип данных `chr` в `dttm` для столбцов `First.time.seen` и `First.time.seen`. Это нужно для корректного отображения даты и времени. Затем посмотрим на изменённый датафрейм.

```{r}
ds2$First.time.seen <- as.POSIXct(ds2$First.time.seen, 
                                  format = "%Y-%m-%d %H:%M:%S")
ds2$Last.time.seen <- as.POSIXct(ds2$Last.time.seen, 
                                 format = "%Y-%m-%d %H:%M:%S")
ds2 %>% glimpse() 
```

Заметим, что в некоторых данных есть лишние пробелы, которые нужно убрать, для читабельности датафреймов. 

```{r}
ds1 <- mutate_all(ds1, trimws) 
ds1 %>% glimpse() 
```

```{r}
ds2 <- mutate_all(ds2, trimws) 
ds2 %>% glimpse() 
```

### Этап 2. Анализ

#### Точки доступа

##### 1. Определим небезопасные точки доступа (без шифрования – OPN).
```{r}
open_df <- ds1 %>% filter(Privacy == "OPN") %>%
  select(BSSID, Privacy, LAN.IP, ESSID)

open_df %>% arrange(desc(open_df))
```

##### 2. Определим производителя для каждого обнаруженного устройства. Для начала найдём уникальные устройства из списка обнаруженных. 

```{r}
mac_id <- sub("^([A-Fa-f0-9]{2}:[A-Fa-f0-9]{2}:[A-Fa-f0-9]{2}).*", "\\1", open_df$BSSID) %>% unique()

mac_id 
```

С помощью сервиса https://www.wireshark.org/tools/oui-lookup.html определим производителя для каждого обнаруженного устройства. Некоторые устройства не находятся с помощью данного сервиса, поэтому приведём список тех, которые смогли найти:

- 00:03:7A Taiyo Yuden Co., Ltd.
- 00:03:7F Atheros Communications, Inc.
* 00:25:00 Apple, Inc.
* 00:26:99 Cisco Systems, Inc
+ E0:D9:E3 Eltex Enterprise Ltd.
+ E8:28:C1 Eltex Enterprise Ltd.

##### 3. Выявим устройства, использующие последнюю версию протокола шифрования WPA3, и названия точек доступа, реализованных на этих устройствах.

```{r}
open_df <- ds1 %>% filter(Privacy == "WPA3 WPA2") %>%
  select(ESSID, Privacy, BSSID)

open_df
```

##### 4. Отсортировать точки доступа по интервалу времени, в течение которого они находились на связи, по убыванию.

```{r}
f_time <- as.POSIXct(ds1$First.time.seen, tz = "UTC")
l_time <- as.POSIXct(ds1$Last.time.seen, tz = "UTC")

diff_time <- difftime(l_time, f_time, units = "secs")
diff_time <- as.data.frame(diff_time)
diff_time

sort_time <- ds1 %>% mutate(diff_time) %>%
  arrange(desc(diff_time)) %>%
  select(ESSID, BSSID, diff_time)

sort_time %>% head(10)
```

##### 5. Обнаружить топ-10 самых быстрых точек доступа.

```{r}
df1_speed <- ds1 %>% arrange(desc(Speed)) %>%
  select(ESSID, BSSID, Speed)

df1_speed %>% head(10)
```

##### 6. Отсортировать точки доступа по частоте отправки запросов (beacons) в единицу времени по их убыванию.

```{r}
diff_time_num <- lapply(diff_time, as.numeric)
df_diff_time_num <- as.data.frame(diff_time_num)
df_beacons <- as.data.frame(as.numeric(ds1$X..beacons))

freq <- sapply(seq_along(df_beacons), function(i) df_beacons[[i]] / df_diff_time_num[[i]])
freq <- data.frame(freq)
freq <- round(freq, 3)

all_df <- ds1 %>% select(ESSID, BSSID, X..beacons)
all_df2 <- cbind(all_df, diff_time, freq)

sort_all_df2 <- arrange(all_df2, desc(freq)) %>% filter(!is.infinite(freq))

sort_all_df2
```

#### Данные клиентов

##### 1. Определить производителя для каждого обнаруженного устройства. Для начала найдём уникальные устройства из списка обнаруженных. 

```{r}
mac_id_2 <- ds2 %>% filter(grepl("(..:..:..)", BSSID)) %>% select(BSSID)
mac_id_3 <- unique(mac_id_2)
mac_id_3


mac_id2 <- sub("^([A-Fa-f0-9]{2}:[A-Fa-f0-9]{2}:[A-Fa-f0-9]{2}).*", "\\1", mac_id_3$BSSID) %>% unique()
mac_id2 
```

С помощью сервиса https://www.wireshark.org/tools/oui-lookup.html определим производителя для каждого обнаруженного устройства. Некоторые устройства не находятся с помощью данного сервиса, поэтому приведём список тех, которые смогли найти:

+ 00:03:7F Atheros Communications, Inc.
+ 00:0D:97 Hitachi Energy USA Inc.
+ 00:23:EB Cisco Systems, Inc
* 00:25:00 Apple, Inc.
* 00:26:99 Cisco Systems, Inc
* 08:3A:2F Guangzhou Juan Intelligent Tech Joint Stock Co.,Ltd
* 0C:80:63 Tp-Link Technologies Co.,Ltd.
- DC:09:4C Huawei Technologies Co.,Ltd
- E0:D9:E3 Eltex Enterprise Ltd.
- E8:28:C1 Eltex Enterprise Ltd.

##### 2. Обнаружить устройства, которые НЕ рандомизируют свой MAC адрес. Устройства, которые не рандомизируют свой MAC-адрес, будут иметь постоянный BSSID.

```{r}
no_rand <- ds2 %>%
  filter(!grepl("\\(not associated\\)", BSSID) & !Station.MAC %in% grep(":", ds2$Station.MAC, value = TRUE)) %>%
  distinct(Station.MAC, .keep_all = TRUE)

no_rand2 <- as.data.frame(no_rand$Station.MAC)
names(no_rand2) <- "Devices"
no_rand2
```

##### 3. Кластеризовать запросы от устройств к точкам доступа по их именам. Определить время появления устройства в зоне радиовидимости и время выхода его из нее.

```{r}
clust_df <- ds2 %>%
  filter(!is.na(Probed.ESSIDs), !is.na(Power), !is.na(First.time.seen), !is.na(Last.time.seen)) %>% 
  group_by(Station.MAC, Probed.ESSIDs) %>% summarise("first_log" = min(First.time.seen), 
                                                     "last_log" = max(Last.time.seen),
                                                     
  Power = ifelse(all(is.numeric(as.numeric(Power))), sum(as.numeric(Power)), NA)) %>% arrange(first_log)

clust_df %>% head(10)
```

##### 4. Оценить стабильность уровня сигнала внутри кластера во времени. Выявить наиболее стабильный кластер

```{r}
s_clust <- clust_df %>% group_by(Station.MAC, Probed.ESSIDs) %>%
  summarise(Power = mean(Power)) %>% arrange((Power))

s_clust %>% head(1)
```

## Оценка результатов

В ходе практической работы были импортированы, подготовлены и проанализированы данные трафика Wi-Fi сетей, а таже дан ответ на поставленные задачи. 

## Вывод

Были развиты практические навыки использования языка программирования R для обработки данных с помощью пакета `dplyr`.