---
title: "Практическое задание №3"
author: "Журавлева Юлия БИСО-01-20"
format: 
  md:
    output-file: README.md
---
# Основы обработки данных с помощью R с использованием пакета tidyverse.

## Цель работы

1. Закрепить навыки исследования данных журнала Windows Active Directory
2. Изучить структуру журнала системы Windows Active Directory
3. Закрепить практические навыки использования языка программирования R для обработки данных
4. Закрепить знания основных функций обработки данных экосистемы tidyverse языка R

## Исходные данные

1.  ОС Windows 10
2.  RStudio Desktop
3.  Интерпретатор языка R 4.2.2
4.  Архив `dataset.tar.gz`

## План

1. Импортировать данные из архива `dataset.tar.gz` и привести в вид "аккуратных данных".
2. Провести анализ данных и ответить на поставленные вопросы.

## Ход выполнения работы

### Этап 1. Подготовка данных

Для начала установим необходимые пакеты.

```{r}
library(dplyr)
library(jsonlite)
library(tidyr)
library(xml2) #для кодов винды
library(rvest) #для кодов винды
```

#### 1. Импортируйте данные в R. 

```{r}
url <- "https://storage.yandexcloud.net/iamcth-data/dataset.tar.gz"
download.file(url, destfile = tf <- tempfile(fileext = ".tar.gz"), mode = "wb")
temp_dir <- tempdir()
untar(tf, exdir = temp_dir)

json <- list.files(temp_dir, pattern="\\.json$", full.names = TRUE, recursive = TRUE)
ds_json <- stream_in(file(json))
```

#### 2. Привести датасеты в вид “аккуратных данных”, преобразовать типы столбцов в соответствии с типом данных

```{r}
ds <- ds_json %>%
  mutate(`@timestamp` = as.POSIXct(`@timestamp`, format = "%Y-%m-%dT%H:%M:%OSZ", tz = "UTC")) %>%
  rename(timestamp = `@timestamp`, metadata = `@metadata`)

ds %>% glimpse()
```

#### 3. Просмотрите общую структуру данных с помощью функции glimpse()

```{r}
ds %>% glimpse()
```

### Этап 2. Анализ

#### 1. Раскройте датафрейм избавившись от вложенных датафреймов.

```{r}
ds_full <- ds %>% unnest(c(metadata, event, log, winlog, ecs, host, agent), names_sep = ".")

ds_full %>% glimpse() 
```

#### 2. Минимизируйте количество колонок в датафрейме – уберите колоки с единственным значением параметра (т.е. те, значение которых не меняется).

```{r}
unique_count <- ds_full %>% 
  summarise(uni_timestamp = n_distinct(timestamp),
            uni_metadata.beat = n_distinct(metadata.beat),
            uni_metadata.type = n_distinct(metadata.type),
            uni_metadata.version = n_distinct(metadata.version),
            uni_metadata.topic = n_distinct(metadata.topic),
            uni_event.created = n_distinct(event.created),
            uni_event.kind = n_distinct(event.kind),
            uni_event.code = n_distinct(event.code),
            uni_event.action = n_distinct(event.action),
            uni_log.level = n_distinct(log.level),
            uni_message = n_distinct(message),
            uni_winlog.event_data = n_distinct(winlog.event_data),
            uni_winlog.event_id = n_distinct(winlog.event_id),
            uni_winlog.provider_name = n_distinct(winlog.provider_name),
            uni_winlog.api = n_distinct(winlog.api),
            uni_winlog.record_id = n_distinct(winlog.record_id),
            uni_winlog.computer_name = n_distinct(winlog.computer_name),
            uni_winlog.process = n_distinct(winlog.process),
            uni_winlog.keywords = n_distinct(winlog.keywords),
            uni_winlog.provider_guid = n_distinct(winlog.provider_guid),
            uni_winlog.channel = n_distinct(winlog.channel),
            uni_winlog.task = n_distinct(winlog.task),
            uni_winlog.opcode = n_distinct(winlog.opcode),
            uni_winlog.version = n_distinct(winlog.version),
            uni_winlog.user = n_distinct(winlog.user),
            uni_winlog.activity_id = n_distinct(winlog.activity_id),
            uni_winlog.user_data = n_distinct(winlog.user_data),
            uni_ecs.version = n_distinct(ecs.version),
            uni_host.name = n_distinct(host.name),
            uni_agent.ephemeral_id = n_distinct(agent.ephemeral_id),
            uni_agent.hostname = n_distinct(agent.hostname),
            uni_agent.id = n_distinct(agent.id),
            uni_agent.version = n_distinct(agent.version),
            uni_agent.type = n_distinct(agent.type),)

unique_count %>% glimpse()
```

```{r}
ds_full2 <- ds_full %>% select(-metadata.beat, 
                               -metadata.type, 
                               -metadata.version, 
                               -metadata.topic, 
                               -event.kind, 
                               -winlog.api, 
                               -ecs.version,
                               -host.name, 
                               -agent.ephemeral_id,
                               -agent.hostname, 
                               -agent.id, 
                               -agent.version, 
                               -agent.type)

ds_full2 %>% head(10)
```

#### 3. Какое количество хостов представлено в данном датасете?

```{r}
count_host <- ds_full %>% select(agent.hostname) 
count_host %>% unique %>% count() 

ds_full$agent.hostname %>% head(1)
```

#### 4. Подготовьте датафрейм с расшифровкой Windows Event_ID, приведите типы данных к типу их значений.

```{r}
win_url <- "https://learn.microsoft.com/en-us/windows-server/identity/ad-ds/plan/appendix-l--events-to-monitor"
win_html <- xml2::read_html(win_url)
win_df <- rvest::html_table(win_html)
win_df 

event_win_df <- win_df[[1]] %>% mutate_at(vars(`Current Windows Event ID`, `Legacy Windows Event ID`), as.integer)
event_win_df 
```

#### 5. Есть ли в логе события с высоким (High) и средним (Medium) уровнем значимости? Сколько их?

```{r}
freq_table <- table(event_win_df$`Potential Criticality`)
freq_df <- as.data.frame(freq_table)
names(freq_df) <- c("Threat", "Count of threats")

freq_df <- freq_df[-c(2, 4), ]
freq_df
```

## Оценка результатов

В ходе практической работы были получены навыки исследования данных журнала Windows Active Directory и даны ответы на поставленные задачи.

## Вывод

Были развиты практические навыки использования языка программирования R для обработки данных с помощью пакета `dplyr`.