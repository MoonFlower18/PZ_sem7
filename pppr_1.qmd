---
title: "Практическое задание №1"
author: "Журавлева Юлия БИСО-01-20"
format: 
  md:
    output-file: PZ_1.md
---
# Прохождение курса по R в RStudio через командную строку библиотеки Swirl

## Цель работы

1.  Пройти обучение и познакомиться с синтаксисом языка программирования R;
2.  Оформить отчет по изученному материалу.

## Ход выполнения работы

Для начала загрузим пакет Swirl, выберем его во вкладке Packages и введём в строку команду `swirl()`. Далее выбираем курс R Programming и попадаем на список уроков, которые требуется сделать. Всего их 14, в рамках работы надо сделать 4 урока. 

### Урок №1: Основные блоки программирования на языке R

Самая простая форма, которая может использоваться в R - это интерактивный калькулятор.

```
> 5+7
```
```
[1] 12
```

Чтобы не писать каждый раз одно и то же выражение, можно вынести его в переменную "x". После этого запросить вывод этой переменной.

```
> x<-5+7
> x
```
```
[1] 12
```

Далее нужно создать новую переменную "y" и занести туда выражение 'x - 3'. После этого снова запросить вывод этой переменной.

```
> y <- x - 3
> y
```
```
[1] 9
```

Далее создадим вектор через команду 'c()' и занесём его в переменную 'z'.

```
> z <- c(1.1, 9, 3.14)
```

Если возникнут вопросы по какой-либо команде, всегда можно добавить знак вопроса ('?') перед названием команды. 

```
> ?c
```

Посмотрим как записался вектор в переменной 'z'.

```
> z
```
```
[1] 1.10 9.00 3.14
```

Можем скомбинировать вектора в один и вывести информацию на экран. Например, создадим вектор из вектора 'z', 555, 'z'. 

```
> c(z, 555, z)
```
```
[1]   1.10   9.00   3.14 555.00   1.10   9.00   3.14
```

Также вектора могут использоваться в арифметических выражениях. Умножим вектор 'z' на 2 и прибавим к нему 100. Эти операции будут производиться с каждым элементом вектора.

```
> z * 2 + 100
```
```
[1] 102.20 118.00 106.28
```

Наиболее часто встречающиеся операции '+', '-', '/', '*', '^' могут прописываться напрямую. Однако чтобы вычислить корень, нужно использовать команду 'sqrt()', а чтобы взять по модулю - 'abs()'. Попробуем вычислить корень из z - 1 и занести в переменную 'my_sqrt'. Затем узнаем что у нас получился вектор из 3-х чисел, так как вычисление по корню применялось к каждому из них.

```
> my_sqrt <- sqrt(z - 1)
> my_sqrt
```
```
[1] 0.3162278 2.8284271 1.4628739
```

Создадим новую переменную 'my_div' и занесём туда результат деления значений 'z' на 'my_sqrt'. Затем узнаем что получилось в итоге и убедимся, что операция выполняется по элементам (т.е. первому элементу первого вектора соответствует первый элемент второго вектора).
```
> my_div <- z / my_sqrt
> my_div
```
```
[1] 3.478505 3.181981 2.146460
```
Когда вектора равны по длине, то операция вычисляется элемент к элементу. Но если они разные, то самый короткий вектор повторяется снова, пока более длинный не закончится. Выведем на экран результат сложение 2-х векторов: 'c(1, 2, 3, 4)' и 'c(0, 10)'.

```
> c(1, 2, 3, 4) + c(0, 10)
```
```
[1]  1 12  3 14
```

В случае, если первый вектор закончился, а второй нет, то перебор продолжится, то после вывода результата появится предупреждение "Более длинная длина объекта не кратна более короткой длине объекта"

```
> c(1, 2, 3, 4) + c(0, 10, 100)
```
```
[1]   1  12 103   4
```
```
Warning message:
In c(1, 2, 3, 4) + c(0, 10, 100) :
  longer object length is not a multiple of shorter object length
```

Далее рассмотрим лайфхаки, которые сократят время. С помощью стрелок вверх-вниз можно посмотреть какие команды были ранее. Это поможет при отладке и просто в случаях, когда надо повторить команду. Найдём выражение 'z * 2 + 100' и поменяем '100' на '1000'.

``` 
> z * 2 + 1000
```
```
[1] 1002.20 1018.00 1006.28
```

В случае, если забыли верное название какой-то переменной, то на помощь придёт 'Tab'. Просто нужно ввести первые символы переменной и нажать на табуляцию, чтобы появился список переменных с таким началом. Найдём переменную 'my_div' по началу 'my_' и узнаем её значение.

```
> my_div
```
```
[1] 3.478505 3.181981 2.146460
```

### Рабочее пространство и файлы

ааааа

### Последовательности чисел

ааааа

### Вектора

ааааа
