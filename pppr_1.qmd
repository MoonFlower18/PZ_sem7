---
title: "Практическое задание №1"
author: "Журавлева Юлия БИСО-01-20"
format: 
  md:
    output-file: PZ_1.md
---
# Прохождение курса по R в RStudio через командную строку библиотеки Swirl

## Цель работы

1.  Пройти обучение и познакомиться с синтаксисом языка программирования R;
2.  Оформить отчет по изученному материалу.

## Ход выполнения работы

Для начала загрузим пакет Swirl, выберем его во вкладке Packages и введём в строку команду `swirl()`. Далее выбираем курс R Programming и попадаем на список уроков, которые требуется сделать. Всего их 14, в рамках работы надо сделать 4 урока. 

### Урок №1: Основные блоки программирования на языке R

Самая простая форма, которая может использоваться в R - это интерактивный калькулятор.

```
> 5+7
```
```
[1] 12
```

Чтобы не писать каждый раз одно и то же выражение, можно вынести его в переменную "x". После этого запросить вывод этой переменной.

```
> x<-5+7
> x
```
```
[1] 12
```

Далее нужно создать новую переменную "y" и занести туда выражение 'x - 3'. После этого снова запросить вывод этой переменной.

```
> y <- x - 3
> y
```
```
[1] 9
```

Далее создадим вектор через команду 'c()' и занесём его в переменную 'z'.

```
> z <- c(1.1, 9, 3.14)
```

Если возникнут вопросы по какой-либо команде, всегда можно добавить знак вопроса ('?') перед названием команды. 

```
> ?c
```

Посмотрим как записался вектор в переменной 'z'.

```
> z
```
```
[1] 1.10 9.00 3.14
```

Можем скомбинировать вектора в один и вывести информацию на экран. Например, создадим вектор из вектора 'z', 555, 'z'. 

```
> c(z, 555, z)
```
```
[1]   1.10   9.00   3.14 555.00   1.10   9.00   3.14
```

Также вектора могут использоваться в арифметических выражениях. Умножим вектор 'z' на 2 и прибавим к нему 100. Эти операции будут производиться с каждым элементом вектора.

```
> z * 2 + 100
```
```
[1] 102.20 118.00 106.28
```

Наиболее часто встречающиеся операции '+', '-', '/', '*', '^' могут прописываться напрямую. Однако чтобы вычислить корень, нужно использовать команду 'sqrt()', а чтобы взять по модулю - 'abs()'. Попробуем вычислить корень из z - 1 и занести в переменную 'my_sqrt'. Затем узнаем что у нас получился вектор из 3-х чисел, так как вычисление по корню применялось к каждому из них.

```
> my_sqrt <- sqrt(z - 1)
> my_sqrt
```
```
[1] 0.3162278 2.8284271 1.4628739
```

Создадим новую переменную 'my_div' и занесём туда результат деления значений 'z' на 'my_sqrt'. Затем узнаем что получилось в итоге и убедимся, что операция выполняется по элементам (т.е. первому элементу первого вектора соответствует первый элемент второго вектора).
```
> my_div <- z / my_sqrt
> my_div
```
```
[1] 3.478505 3.181981 2.146460
```
Когда вектора равны по длине, то операция вычисляется элемент к элементу. Но если они разные, то самый короткий вектор повторяется снова, пока более длинный не закончится. Выведем на экран результат сложение 2-х векторов: 'c(1, 2, 3, 4)' и 'c(0, 10)'.

```
> c(1, 2, 3, 4) + c(0, 10)
```
```
[1]  1 12  3 14
```

В случае, если первый вектор закончился, а второй нет, то перебор продолжится, то после вывода результата появится предупреждение "Более длинная длина объекта не кратна более короткой длине объекта"

```
> c(1, 2, 3, 4) + c(0, 10, 100)
```
```
[1]   1  12 103   4
```
```
Warning message:
In c(1, 2, 3, 4) + c(0, 10, 100) :
  longer object length is not a multiple of shorter object length
```

Далее рассмотрим лайфхаки, которые сократят время. С помощью стрелок вверх-вниз можно посмотреть какие команды были ранее. Это поможет при отладке и просто в случаях, когда надо повторить команду. Найдём выражение 'z * 2 + 100' и поменяем '100' на '1000'.

``` 
> z * 2 + 1000
```
```
[1] 1002.20 1018.00 1006.28
```

В случае, если забыли верное название какой-то переменной, то на помощь придёт 'Tab'. Просто нужно ввести первые символы переменной и нажать на табуляцию, чтобы появился список переменных с таким началом. Найдём переменную 'my_div' по началу 'my_' и узнаем её значение.

```
> my_div
```
```
[1] 3.478505 3.181981 2.146460
```

### Рабочее пространство и файлы

Определим, какой каталог использует текущий сеанс R в качестве текущего рабочего каталога, используя команду 'getwd()'.

```
> getwd()
```
```
[1] "C:/Users/Юлия/Documents/PZ_sem7_7"
```

Выведем на экран все объекты локальной рабочей среды с помощью команды 'ls()'. Так как переменных изначально не было, на экран вывело "character(0)"

```
> ls()
```
```
character(0)
```
Назначим 9 в x с помощью команды "x <- 9".

```
> x <- 9
```

Теперь посмотрим на объекты локальной рабочей среды с помощью команды "ls()".

```
> ls()
```
```
[1] "x"
```

Выведем на экран все файлы рабочей директории с помощью команд "list.files()" или "dir()".                               

```
> dir()
```
[1] "pppr_1.html"     "pppr_1.qmd"      "pppr_1_files"    "PZ_1"           
[5] "PZ_1.md"         "PZ_sem7_2.Rproj" "README.md"       "testdir"  


| You are amazing!

  |=================                                                   |  26%
| As we go through this lesson, you should be examining the help page for
| each new function. Check out the help page for list.files with the command
| ?list.files.

> ?list.files

| All that practice is paying off!

  |===================                                                 |  28%
| One of the most helpful parts of any R help file is the See Also section.
| Read that section for list.files. Some of these functions may be used in
| later portions of this lesson.

...

  |=====================                                               |  31%
| Using the args() function on a function name is also a handy way to see
| what arguments a function can take.

...

  |=======================                                             |  33%
| Use the args() function to determine the arguments to list.files().

> args(list.files())
NULL

| Not quite right, but keep trying. Or, type info() for more options.

| Type args(list.files) to see the arguments to list.files.

> args(list.files
+ 0
Error: unexpected numeric constant in:
"args(list.files
0"
> args(list.files)
function (path = ".", pattern = NULL, all.files = FALSE, full.names = FALSE, 
    recursive = FALSE, ignore.case = FALSE, include.dirs = FALSE, 
    no.. = FALSE) 
NULL

| That's a job well done!

  |========================                                            |  36%
| Assign the value of the current working directory to a variable called
| "old.dir".

> old.dir <- getwd()

| That's correct!

  |==========================                                          |  38%
| We will use old.dir at the end of this lesson to move back to the place
| that we started. A lot of query functions like getwd() have the useful
| property that they return the answer to the question as a result of the
| function.

...

  |============================                                        |  41%
| Use dir.create() to create a directory in the current working directory
| called "testdir".

> dir.create("testdir")
Warning message:
In dir.create("testdir") : 'testdir' already exists

| Excellent work!

  |==============================                                      |  44%
| We will do all our work in this new directory and then delete it after we
| are done. This is the R analog to "Take only pictures, leave only
| footprints."

...

  |===============================                                     |  46%
| Set your working directory to "testdir" with the setwd() command.

> setwd("testdir")

| All that practice is paying off!

  |=================================                                   |  49%
| In general, you will want your working directory to be someplace sensible,
| perhaps created for the specific project that you are working on. In fact,
| organizing your work in R packages using RStudio is an excellent option.
| Check out RStudio at http://www.rstudio.com/

...

  |===================================                                 |  51%
| Create a file in your working directory called "mytest.R" using the
| file.create() function.

> file.create("mytest.R")
[1] TRUE

| That's a job well done!

  |=====================================                               |  54%
| This should be the only file in this newly created directory. Let's check
| this by listing all the files in the current directory.

> dir()
[1] "mytest.R"

| You are quite good my friend!

  |======================================                              |  56%
| Check to see if "mytest.R" exists in the working directory using the
| file.exists() function.

> file.exists("mytest.R")
[1] TRUE

| You got it!

  |========================================                            |  59%
| These sorts of functions are excessive for interactive use. But, if you are
| running a program that loops through a series of files and does some
| processing on each one, you will want to check to see that each exists
| before you try to process it.

...

  |==========================================                          |  62%
| Access information about the file "mytest.R" by using file.info().

> file.info("mytest.R")
         size isdir mode               mtime               ctime
mytest.R    0 FALSE  666 2023-09-30 11:36:47 2023-09-28 15:47:09
                       atime exe
mytest.R 2023-09-30 11:36:47  no

| You are really on a roll!

  |============================================                        |  64%
| You can use the $ operator --- e.g., file.info("mytest.R")$mode --- to grab
| specific items.

...

  |=============================================                       |  67%
| Change the name of the file "mytest.R" to "mytest2.R" by using
| file.rename().

> file.rename("mytest.R", "mytest2.R")
[1] TRUE

| You got it right!

  |===============================================                     |  69%
| Your operating system will provide simpler tools for these sorts of tasks,
| but having the ability to manipulate files programatically is useful. You
| might now try to delete mytest.R using file.remove('mytest.R'), but that
| won't work since mytest.R no longer exists. You have already renamed it.

...

  |=================================================                   |  72%
| Make a copy of "mytest2.R" called "mytest3.R" using file.copy().

> file.copy("mytest3.R", "mytest3.R")
[1] FALSE

| Almost! Try again. Or, type info() for more options.

| file.copy("mytest2.R", "mytest3.R") works.

> file.copy("mytest2.R", "mytest3.R")
[1] TRUE

| Great job!

  |===================================================                 |  74%
| You now have two files in the current directory. That may not seem very
| interesting. But what if you were working with dozens, or millions, of
| individual files? In that case, being able to programatically act on many
| files would be absolutely necessary. Don't forget that you can,
| temporarily, leave the lesson by typing play() and then return by typing
| nxt().

...

  |====================================================                |  77%
| Provide the relative path to the file "mytest3.R" by using file.path().

> file.path("mytest3.R")
[1] "mytest3.R"

| You are really on a roll!

  |======================================================              |  79%
| You can use file.path to construct file and directory paths that are
| independent of the operating system your R code is running on. Pass
| 'folder1' and 'folder2' as arguments to file.path to make a
| platform-independent pathname.

> file.path("folder1", "folder2")
[1] "folder1/folder2"

| Nice work!

  |========================================================            |  82%
| Take a look at the documentation for dir.create by entering ?dir.create .
| Notice the 'recursive' argument. In order to create nested directories,
| 'recursive' must be set to TRUE.

> ?dir.create

| That's a job well done!

  |==========================================================          |  85%
| Create a directory in the current working directory called "testdir2" and a
| subdirectory for it called "testdir3", all in one command by using
| dir.create() and file.path().

> file.path(dir.create("testdir2"), dir.create("testdir3"))
[1] "TRUE/TRUE"

| Not quite right, but keep trying. Or, type info() for more options.

| dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE) will do the
| trick. If you forgot the recursive argument, the command may have appeared
| to work, but it didn't create the nested directory.

> dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)

| You are amazing!

  |===========================================================         |  87%
| Go back to your original working directory using setwd(). (Recall that we
| created the variable old.dir with the full path for the orginal working
| directory at the start of these questions.)

> setwd("old.dir")
Error in setwd("old.dir") : cannot change working directory
> setwd(old.dir)

| Keep working like that and you'll get there!

  |=============================================================       |  90%
| It is often helpful to save the settings that you had before you began an
| analysis and then go back to them at the end. This trick is often used
| within functions; you save, say, the par() settings that you started with,
| mess around a bunch, and then set them back to the original values at the
| end. This isn't the same as what we have done here, but it seems similar
| enough to mention.

...

  |===============================================================     |  92%
| After you finish this lesson delete the 'testdir' directory that you just
| left (and everything in it)

...

  |=================================================================   |  95%
| Take nothing but results. Leave nothing but assumptions. That sounds like
| 'Take nothing but pictures. Leave nothing but footprints.' But it makes no
| sense! Surely our readers can come up with a better motto . . .

...

  |==================================================================  |  97%
| In this lesson, you learned how to examine your R workspace and work with
| the file system of your machine from within R. Thanks for playing!

...

  |====================================================================| 100%
| Would you like to receive credit for completing this course on
| Coursera.org?

1: Yes
2: No

Выбор:2

| You are really on a roll!

| You've reached the end of this lesson! Returning to the main menu...

| Would you like to continue with one of these lessons?

1: R Programming Basic Building Blocks
2: No. Let me start something new.

### Последовательности чисел

ааааа

### Вектора

ааааа
